openapi: 3.0.0
info:
  title: Advanced Pet Store API
  version: 1.0.0
  description: A comprehensive API to demonstrate robust OpenAPI to JSON Schema conversion
servers:
  - url: https://petstore.swagger.io/v2
paths:
  /pet/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a single pet by its ID
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
  /pet:
    post:
      summary: Add a new pet to the store
      description: Add a new pet with all required information
      operationId: addPet
      requestBody:
        description: Pet object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
#  /pet/findByStatus:
#    get:
#      summary: Finds Pets by status
#      description: Multiple status values can be provided with comma separated strings
#      operationId: findPetsByStatus
#      parameters:
#        - name: status
#          in: query
#          description: Status values that need to be considered for filter
#          required: true
#          schema:
#            type: array
#            items:
#              type: string
#              enum: [available, pending, sold]
#            minItems: 1
#            uniqueItems: true
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Pet'
#  /pet/{petId}/uploadImage:
#    post:
#      summary: Uploads an image
#      description: Upload an image for a pet
#      operationId: uploadFile
#      parameters:
#        - name: petId
#          in: path
#          description: ID of pet to update
#          required: true
#          schema:
#            type: integer
#            format: int64
#        - name: additionalMetadata
#          in: query
#          description: Additional data to pass to server
#          required: false
#          schema:
#            type: string
#      requestBody:
#        content:
#          multipart/form-data:
#            schema:
#              type: object
#              properties:
#                file:
#                  type: string
#                  format: binary
#                  description: file to upload
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/ApiResponse'
#  /store/inventory:
#    get:
#      summary: Returns pet inventories by status
#      description: Returns a map of status codes to quantities
#      operationId: getInventory
#      security:
#        - api_key: []
#      responses:
#        '200':
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                type: object
#                additionalProperties:
#                  type: integer
#                  format: int32
#  /user:
#    post:
#      summary: Create user
#      description: This can only be done by the logged in user
#      operationId: createUser
#      requestBody:
#        description: Created user object
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/User'
#      responses:
#        '200':
#          description: successful operation
components:
  schemas:
    Pet:
      type: object
      allOf:
        - $ref: '#/components/schemas/PetBase'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 10
#            category:
#              $ref: '#/components/schemas/Category'
#            tags:
#              type: array
#              items:
#                $ref: '#/components/schemas/Tag'
            status:
              type: string
              description: pet status in the store
              enum: [available, pending, sold]
      required:
        - name
        - photoUrls
    PetBase:
      type: object
      properties:
        name:
          type: string
          example: "doggie"
          description: The name of the pet
        photoUrls:
          type: array
          items:
            type: string
          description: List of photo URLs for the pet
      required:
        - name
        - photoUrls
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "Dogs"
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: "tag1"
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: "theUser"
          description: The username
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "James"
        email:
          type: string
          example: "john@email.com"
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          format: int32
          description: User Status
          example: 1
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
